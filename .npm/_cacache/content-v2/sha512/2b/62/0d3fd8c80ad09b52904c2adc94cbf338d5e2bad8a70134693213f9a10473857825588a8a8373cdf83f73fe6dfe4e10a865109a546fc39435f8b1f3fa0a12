{"_id":"event-iterator","_rev":"6-7a4c681335379af67000b49b6abfa011","name":"event-iterator","description":"Convert event emitters and event targets to ES async iterators","dist-tags":{"latest":"2.0.0"},"versions":{"1.0.0":{"name":"event-iterator","version":"1.0.0","description":"Convert event emitters and event targets to ES async iterators","homepage":"https://github.com/rolftimmermans/event-iterator","license":"MIT","author":{"name":"Rolf Timmermans","email":"rolftimmermans@voormedia.com"},"repository":{"type":"git","url":"https://github.com/rolftimmermans/event-iterator.git"},"keywords":["async","async-iterator","event-emitter","event-target","stream","await","for-await","esnext","node","browser"],"main":"lib/node.js","browser":"lib/dom.js","devDependencies":{"@types/chai":">= 0","@types/jsdom":">= 0","@types/mocha":">= 0","@types/node":">= 8.0","chai":">= 4.1","jsdom":">= 11.0","mocha":">= 3.1","ts-node":">= 3.3","typescript":">= 2.5"},"scripts":{"test":"mocha && rm -rf lib && tsc"},"_id":"event-iterator@1.0.0","dist":{"shasum":"7511040a489e71751a704a7cfc68268865b27dff","tarball":"https://registry.npmjs.org/event-iterator/-/event-iterator-1.0.0.tgz","integrity":"sha512-Mx19TjqQwhlbroYZvFcSGOfV1PePO6g8kcBQTHybit5dNSzK0FVy73xsplkfC7BswDK+fO8FjV/FkMdHwNgNSA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG9rbEubpWLvDKU8X4lFIJDpFxM68BQl7K+qFnrWo61pAiAAiyC/guCptY5dlgIkDv+q9zNmEOcjjm0ghEuaSlGqUw=="}]},"maintainers":[{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"}],"_npmUser":{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/event-iterator-1.0.0.tgz_1506073905349_0.12994069838896394"},"directories":{}},"1.1.0":{"name":"event-iterator","version":"1.1.0","description":"Convert event emitters and event targets to ES async iterators","homepage":"https://github.com/rolftimmermans/event-iterator","license":"MIT","author":{"name":"Rolf Timmermans","email":"rolftimmermans@voormedia.com"},"repository":{"type":"git","url":"https://github.com/rolftimmermans/event-iterator.git"},"keywords":["async","async-iterator","event-emitter","event-target","stream","await","for-await","esnext","node","browser"],"main":"lib/node.js","browser":"lib/dom.js","devDependencies":{"@types/chai":">= 0","@types/jsdom":">= 0","@types/mocha":">= 0","@types/node":">= 8.0","chai":">= 4.1","jsdom":">= 11.0","mocha":">= 3.1","ts-node":">= 3.3","typescript":">= 3.3"},"scripts":{"test":"mocha && rm -rf lib && tsc"},"_id":"event-iterator@1.1.0","dist":{"shasum":"9cab6c8e58f213e759eaf5dc2cfc0c7567ad1565","tarball":"https://registry.npmjs.org/event-iterator/-/event-iterator-1.1.0.tgz","integrity":"sha512-dft5jW04rPo3PFNukjv9SInkASmI3Y20zdbtcWTSGmLVKhzVlLYBDVpegrh9iH7GtV+A0wF6/OxegUnVfMwBVQ==","fileCount":21,"unpackedSize":27136,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJckUTbCRA9TVsSAnZWagAAResP/2GIF6dWg3NPuCIkK+/i\ntOkAsdWJdwb2XaNTI1q3vOmC5m/WaFSBe7KOHUlfP925V8cgfvC9DyjDcma7\nwu6atFIvOrxzczxX+KCBJwIRwIREd/YOK3iyTOCqAtqeiAqiguADG2tfTHlM\nZERIjy9cMJ8eMppyu7dzqYs9y7Wdt0YLeMh5UWHq896yNeETzz5p3zn5yobW\nwTFi2usUkvFBj3LG2rXRswdoEGER7ITcbzQge6b0OdQpIVJK1h3N6LrYDsHz\ncC/mSryITTRU/+zqHd51WUGDMQvam6iOuvaFivnE1sQYuzjFZP7pl2g/Pfiv\nd85H967ZRrfq6SLyGLFTPl/9YpO2+9DAETdZG9l2ftqvP940bRU6oJWQKHc/\nXu4y7OugTDrjfhxpCTzfjUZNS/NQDstCTcL06lvAlXb2J4Ij86sRLiSXvwCE\nsDJ9YX9s4WMAF020Df0JR4ygs1VQuvc7NfQe97UMUVmFCqy+VwtboAKXyE4R\nY8R8cuojfmmramI2kGxaCOMdn02fKR56QKmcqGbX5MmpcMAA0ljUhNDX6MIf\nGDLMtB34nIexZJYGH+dxIod4vJRpCOzSWCHaY/SfpaBOHD4KXNOnufR8r9++\nT/Xiy9KwseRf2/L0dHcW+XqQU605F4BnFLEJiAKdZfagjfniqo9GP7QDsySA\n26mP\r\n=3SnG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA99yG369uYBSnVjgheay8Y78/Dc54jeq1lYAeECSPA2AiEAp+K//HJgKGyrbQ4ikBqsaXa7ufpOlSvQHxf8/SyREPE="}]},"maintainers":[{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"}],"_npmUser":{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/event-iterator_1.1.0_1553024218566_0.5392090623261983"},"_hasShrinkwrap":false},"1.2.0":{"name":"event-iterator","version":"1.2.0","description":"Convert event emitters and event targets to ES async iterators","homepage":"https://github.com/rolftimmermans/event-iterator","license":"MIT","author":{"name":"Rolf Timmermans","email":"rolftimmermans@voormedia.com"},"repository":{"type":"git","url":"https://github.com/rolftimmermans/event-iterator.git"},"keywords":["async","async-iterator","event-emitter","event-target","stream","await","for-await","esnext","node","browser"],"main":"lib/node.js","browser":"lib/dom.js","devDependencies":{"@types/chai":">= 0","@types/jsdom":">= 0","@types/mocha":">= 0","@types/node":">= 8.0","chai":">= 4.1","jsdom":">= 11.0","mocha":">= 3.1","ts-node":">= 3.3","typescript":">= 3.3"},"scripts":{"test":"mocha test/*-test.ts && rm -rf lib && tsc"},"_id":"event-iterator@1.2.0","dist":{"shasum":"2e71dc6ca56f1cf8ebcb2b9be7fdfd10acabbb76","tarball":"https://registry.npmjs.org/event-iterator/-/event-iterator-1.2.0.tgz","integrity":"sha512-Daq7YUl0Mv1i4QEgzGQlz0jrx7hUFNyLGbiF+Ap7NCMCjDLCCnolyj6s0TAc6HmrBziO5rNVHsPwGMp7KdRPvw==","fileCount":21,"unpackedSize":29964,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnLYVCRA9TVsSAnZWagAA4u0P/3AKXozmN6k8HMlDxUtk\naZpBA4uinOjkn5xRemKoDHAVdvgEXQhxEiXi5vffbKTRQbPXBfZ/kYOo88bS\n4Xu+GWDhrKA1evvBQ2d/+kSMnd7EWB/TtUOkqSMq4ULc01GVfhL1e3O9ppGU\nWv6oTfsUYKFYN8U9m0XzZrJ/F64fhTyutvgnxIEnQCj3h9NNA3a+n3hBDBsT\naXjp7+MiKYRqlvNv5lx/bX99NxSbNI9bYZKYoKpkBLw33BvrczOhzNe+xggE\nImRCOOlydpANE4GkjUj1paH61nGbtskCVOocrs9q18HOuzF6abUvs4hhTQY4\nYxM6jx/IBfu5MEp81i6iHvhSC3YuTo9btCocanAqfapMvWVB0rK1INxv3+Oj\niaeV1M6012bLtj+jLE10xt2jCs+suVGBrIKw43o6N1KdFF+/E/1Wvw9dDOQJ\nJRXRmCn41w4ABOI5cUNgPlMWwq48pp/xmnS/ILgAeeravBtG+gPnlSBRfXFh\nt8/6UJnb/DAqe19QftQosip5L6GDdHYUMN/1pnQeXi79rAG2nG/k0atKyYZ5\nMNWHKHpVK9xxyGsDbpqbb+aB/oo8cIPRcXeSZ84Q3PXh5FnThRiK5c9b8vB+\npkbZXlUhI26MYI07nVGYAlMIbt0vGpxnF1bLDliRrx0aff+o5N67cw8JVn/0\nZtQS\r\n=7F/k\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGTVjnJwCsyVgB8gW5tCo/hJr/7UHWTQifFMGP347dVMAiAXBPQw4HD9dS5RoIgNx5DSI1yQUYQIqkVMXbjCjeg8yw=="}]},"maintainers":[{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"}],"_npmUser":{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/event-iterator_1.2.0_1553774101118_0.7091267914853772"},"_hasShrinkwrap":false},"2.0.0":{"name":"event-iterator","version":"2.0.0","description":"Convert event emitters and event targets to ES async iterators","homepage":"https://github.com/rolftimmermans/event-iterator","license":"MIT","author":{"name":"Rolf Timmermans","email":"rolftimmermans@voormedia.com"},"repository":{"type":"git","url":"git+https://github.com/rolftimmermans/event-iterator.git"},"keywords":["async","async-iterator","event-emitter","event-target","stream","await","for-await","esnext","node","browser"],"main":"lib/node.js","browser":"lib/dom.js","devDependencies":{"@types/chai":">= 0","@types/jsdom":">= 0","@types/mocha":">= 0","@types/node":">= 8.0","@types/sinon":">= 7.5.1","@typescript-eslint/eslint-plugin":"^3.2.0","@typescript-eslint/parser":"^3.2.0","chai":">= 4.1","eslint":"^7.2.0","eslint-config-prettier":"^6.11.0","eslint-plugin-prettier":"^3.1.3","jsdom":">= 11.0","mocha":">= 3.1","prettier":"^2.0.5","ts-node":">= 3.3","typescript":">= 3.3","sinon":">= 7.5.0"},"scripts":{"lint":"eslint src/**/*.ts test/**/*.ts","fmt":"eslint --fix src/**/*.ts test/**/*.ts","test":"mocha --require ts-node/register test/*-test.ts && rm -rf lib && tsc"},"gitHead":"d7699d3d6e8bf3fa82c7cd42dc1a0a44e342b6d9","bugs":{"url":"https://github.com/rolftimmermans/event-iterator/issues"},"_id":"event-iterator@2.0.0","_nodeVersion":"12.12.0","_npmVersion":"6.11.3","dist":{"integrity":"sha512-KGft0ldl31BZVV//jj+IAIGCxkvvUkkON+ScH6zfoX+l+omX6001ggyRSpI0Io2Hlro0ThXotswCtfzS8UkIiQ==","shasum":"10f06740cc1e9fd6bc575f334c2bc1ae9d2dbf62","tarball":"https://registry.npmjs.org/event-iterator/-/event-iterator-2.0.0.tgz","fileCount":20,"unpackedSize":39986,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe43SACRA9TVsSAnZWagAAKVkP/RYhvpQRiNPWAiM2YQj0\nCdXbT3PD680UVpJ7uSzwW2HehShPc/gmdvt9JRIZQcLqBMjJLKUR3WMXYWBy\nwLEPOlu+drCWVCbAp/U//8QHzpAWYLfgiZpwtHdcLQUWHzACtwUgiYaO4ORR\n4VpXKuxjBMLlAT5q5jWXP5OElR/xlp3SnLXdtBRB1s/VFdxGwwm7eE1t1lL/\nG7S5t5ZYe/QMKgeevuHYj4Trg0YE3sXy1GuUVk0rm6BfNig/K1uLNTX9vAeb\nnX3ZBmIQvpttSV3rkSM+yV12r1X3CfMGcT0vRwKd6p7n/3IGopJwhY3BmbDU\nBeWyu+CagAFQ5l6ywLtcDNjwyOff+PYm2pBzNfH7uX0df0mfKIBSRnwHs+Kl\nIKEpbkVDYxapkj1bU1gD3dPwk4bcPEkHTFPy8kmLeEXgadMqm5iPvZ/qVFFa\nQB6SQgYu31FQplsRrCYk64BqGK+cWCAWu/md1+SigstZ7u9ktXTgd35W4CtA\n6t2/wuazZHZYldp7VUiN9D01kUxTaPssZMg5RhrAWgJ7RyBTocXfAIj9TeeJ\npmasncfazsBs52XAPCQ6OFyAhrELBkzE0F17kAEzBmN9UHrbp347w/FbjB5n\n58z6E1Szr0G9yeygNiVT16124dRqQ2KugW2T+b8s85ndfOuK7MVZfPWxh6KW\n0vJV\r\n=mYBo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH1liohGgDPNDJaPqPjfHhdwcjHNuW8RAYgYdqiMSzNoAiEA3JYBbDNCvR/gKhBTZnr0vvmEvA7AGdJyNBwey0yDQ2M="}]},"maintainers":[{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"}],"_npmUser":{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/event-iterator_2.0.0_1591964799691_0.6241952816063658"},"_hasShrinkwrap":false}},"readme":"# EventIterator: convert any JS event emitter to async iterators\n\n## Highlights\n\n`EventIterator` is a small module that greatly simplifies converting event\nemitters, event targets, and similar objects into EcmaScript async iterators. It\nworks in browser and Node.js environments.\n\nAs a bonus you get utility functions:\n\n  * `subscribe` to subscribe to events on a DOM event target with an async iterator\n  * `stream` to consume data from a Node.js readable stream as an async iterator\n\n## Basic examples\n\nFor client-side browser events:\n\n``` javascript\nimport \"core-js/es7/symbol\" /* If necessary */\nimport {subscribe} from \"event-iterator\"\nconst element = document.querySelector(\"a.example\")\n\nfor await (const click of subscribe.call(element, \"click\")) {\n  /* Asynchronously iterate over click events on the element. */\n}\n```\n\nFor server-side Node.js events:\n\n``` javascript\nimport \"core-js/es7/symbol\" /* If necessary */\nimport {stream} from \"event-iterator\"\nconst file = require(\"fs\").createReadStream(\"example-file\")\n\nfor await (const chunk of stream.call(file)) {\n  /* Asynchronously iterate over buffer chunks read from file. */\n}\n```\n\n## Advanced examples\n\nLet's look at how `subscribe()` and `stream()` are implemented.\n\nFor client-side browser events:\n\n``` javascript\nimport \"core-js/es7/symbol\" /* If necessary */\nimport {EventIterator} from \"event-iterator\"\n\nexport function subscribe(event, options) {\n  /* \"this\" refers to a DOM event target. */\n  return new EventIterator(\n    ({push}) => {\n      this.addEventListener(event, push, options)\n      return () => this.removeEventListener(event, push, options)\n    }\n  )\n}\n```\n\nFor server-side Node.js events:\n\n``` javascript\nimport \"core-js/es7/symbol\" /* If necessary */\nimport {EventIterator} from \"event-iterator\"\n\nexport function stream() {\n  /* \"this\" refers to a Node.js readable stream. */\n  return new EventIterator(\n    queue => {\n      this.addListener(\"data\", queue.push)\n      this.addListener(\"close\", queue.stop)\n      this.addListener(\"error\", queue.fail)\n\n      queue.on(\"highWater\", () => this.pause())\n      queue.on(\"lowWater\", () => this.resume())\n\n      return () => {\n        this.removeListener(\"data\", queue.push)\n        this.removeListener(\"close\", queue.stop)\n        this.removeListener(\"error\", queue.fail)\n        this.destroy()\n      }\n    }\n  )\n}\n```\n\n### Backpressure\n\nIf you cannot reasonably consume all emitted events with your async iterator;\nthe internal `EventIterator` queue can fill up indefinitely.\n\nA warning will be emitted when the queue reaches the high water mark (100 items\nby default).\n\nHowever, if you are able to control the event stream then you can listen to the\n`highWater`, and `lowWater` events to exert backpressure.\n\nWhen these events are emitted can be changed or disabled by setting\n`highWaterMark` and `lowWaterMark` in the options of the `EventIterator`\nconstructor.\n\n```js\nimport {EventIterator} from \"event-iterator\"\n\nconst eventIterator = new EventIterator(\n  ({push, on}) => {\n    const file = require(\"fs\").createReadStream(\"example-file\")\n    file.on(\"data\", push)\n    on(\"highWater\", () => file.pause())\n    on(\"lowWater\", () => file.resume())\n    return () => file.removeListener(\"data\", push)\n  },\n  {highWaterMark: 10, lowWaterMark: 5}\n)\n```\n\n\n## API specification\n\nCreate a new event iterator with `new EventIterator(listen)`. This\nobject implements the async iterator protocol by having a `Symbol.asyncIterator`\nproperty.\n\nNote: you must set up any `Symbol.asyncIterator` polyfills **before** importing\n`EventIterator`.\n\nThe `listen` handler is called every time a new iterator is created to set up\nyour event listeners. The optional `remove` handler is called when the event\nlisteners need to be removed. The `listen` handler returns the `remove`\nhandler, making it easy to call `addListener`/`removeListener` or similar\nfunctions.\n\nType definitions:\n\n``` typescript\nexport interface Queue<T> {\n  push(value: T): void\n  stop(): void\n  fail(error: Error): void\n  on(event: \"highWater\" | \"lowWater\", fn: () => void)\n}\n\nexport type RemoveHandler = () => void\nexport type ListenHandler<T> = (queue: Queue<T>) => void | RemoveHandler\n\n/* High water mark defaults to 100. Set to undefined to disable warnings. */\ninterface EventIteratorOptions = {\n  highWaterMark?: number,\n  lowWaterMark?: number,\n}\n\nclass EventIterator<T> {\n    constructor(ListenHandler<T>, options?: EventIteratorOptions)\n\n    [Symbol.asyncIterator](): AsyncIterator<T>\n}\n```\n\n## Background\n\nThe `EventIterator` class is an adapter to transform any browser or Node.js\nevent emitter into an async iterator that iterates over events.\n\nImagine you have a bunch of text files and in Node.js and you want to decide\nwhether they are longer or shorter than a certain number of lines. The files\nshould not be binary to avoid cluttering the results. To be more specific, we\nwant a function that will:\n\n  * return `true` if the number of lines is 1000 or greater\n  * return `false` if the number of lines is less than 1000\n  * throw an exception if the file appears to be binary (contains NULL bytes)\n  * returns as quickly as possible\n  * conserves memory by not reading entire files at once\n\nA naive solution would look like this:\n\n``` javascript\nfunction countLines(buffer) {\n  const str = buffer.toString()\n  if (str.match(\"\\0\")) throw new Error(\"Binary file!\")\n  return (str.match(/\\n/g) || []).length\n}\n\nfunction isLongTextFile(file) {\n  let lines = 1\n\n  return new Promise((resolve, reject) => {\n    file.on(\"data\", chunk => {\n      lines += countLines(chunk)\n    })\n\n    file.on(\"end\", () => {\n      resolve(lines >= 1000)\n    })\n\n    file.on(\"error\", err => {\n      reject(err)\n    })\n  })\n}\n\nisLongTextFile(fs.createReadStream(\"...\")).then(console.log)\n```\n\nUnfortunately, this solution has some problems:\n\n  * the entire file is read even if the file is way longer than 1000 lines\n  * the entire file is read even if an exception occurs (a NULL byte was found)\n  * multiple exceptions can be thrown if NULL bytes are found in multiple chunks\n\nSo we improve our solution, and we arrive at something like this:\n\n``` javascript\nfunction isLongTextFile(file) {\n  let lines = 1\n\n  const isLong = n => n >= 1000\n\n  return new Promise((resolve, reject) => {\n    file.on(\"data\", chunk => {\n      try {\n        lines += countLines(chunk)\n        if (isLong(lines)) {\n          file.close()\n          resolve(true)\n        }\n      } catch (err) {\n        file.destroy()\n        reject(err)\n      }\n    })\n\n    file.on(\"end\", () => {\n      resolve(isLong(lines))\n    })\n\n    file.on(\"error\", err => {\n      reject(err)\n    })\n  })\n}\n\nisLongTextFile(fs.createReadStream(\"...\")).then(console.log)\n```\n\nThis works and we're happy to have solved the problem!\n\nBut what if there were a nicer way to do this? Async iterators sure seem like a\nnice fit for this problem. They are a stage 3 EcmaScript proposal and can be\nused by using TypeScript or Babel.\n\nA similar solution using async iterators could look like this:\n\n``` javascript\nfunction async isLongTextFile(file) {\n  let lines = 1\n  for await (const chunk of stream.call(file)) { // or file::stream()\n    lines += countLines(chunk)\n    if (lines > 1000) return true\n  }\n  return false\n}\n\nisLongTextFile(fs.createReadStream(\"...\")).then(console.log)\n```\n\nThe question is: how do you create an async iterator from a readable stream?\nConceptually they are very similar; they both:\n\n  * can signal that a next value is available\n  * can signal when the end has been reached\n  * can emit an error, after which no new values will become available\n\nAsync iterators have a few additional advantages that translate in simpler code:\n\n  * early returns and exceptions will stop the iterator and release resources\n  * exceptions in the iterator and in calling code can be handled without additional boilerplate\n\nSo how do you transform a readble stream into an async iterator? With an `EventIterator`.\n\nWe can define the `stream` function above as:\n\n``` javascript\nimport {EventIterator} from \"event-iterator\"\n\nfunction stream() {\n  return new EventIterator(\n    ({ push, stop, fail }) => {\n      this.addListener(\"data\", push)\n      this.addListener(\"end\", stop)\n      this.addListener(\"error\", fail)\n\n      return () => {\n        this.removeListener(\"data\", push)\n        this.removeListener(\"end\", stop)\n        this.removeListener(\"error\", fail)\n        this.destroy()\n      }\n    }\n  )\n}\n```\n\nThe `EventIterator` takes care of:\n\n  * conforming to the async iterator spec\n  * returning placeholder promises to the async iterator if no value is available\n  * queueing values when more data is ready than consumed by the iterator\n  * installing callbacks to release resources so you can remove any listener handlers or do other cleanup\n\nWhy create an abstract `EventIterator` that requires you to define your own\nintegration code? Several reasons:\n\n  * the event emitters as defined by Node.js have a different API than the event targets as defined in the DOM\n  * the events that you are interested in may have different names depending on your use case\n  * you may want to specify custom behaviour when the iterator throws or returns early\n\n## Licensed under MIT license\n\nCopyright (c) 2017-2020 Rolf Timmermans\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","maintainers":[{"name":"rolftimmermans","email":"r.w.timmermans@gmail.com"}],"time":{"modified":"2022-06-17T21:26:56.567Z","created":"2017-09-22T09:51:46.459Z","1.0.0":"2017-09-22T09:51:46.459Z","1.1.0":"2019-03-19T19:36:58.676Z","1.2.0":"2019-03-28T11:55:01.446Z","2.0.0":"2020-06-12T12:26:39.825Z"},"homepage":"https://github.com/rolftimmermans/event-iterator","keywords":["async","async-iterator","event-emitter","event-target","stream","await","for-await","esnext","node","browser"],"repository":{"type":"git","url":"git+https://github.com/rolftimmermans/event-iterator.git"},"author":{"name":"Rolf Timmermans","email":"rolftimmermans@voormedia.com"},"license":"MIT","readmeFilename":"README.md","bugs":{"url":"https://github.com/rolftimmermans/event-iterator/issues"}}