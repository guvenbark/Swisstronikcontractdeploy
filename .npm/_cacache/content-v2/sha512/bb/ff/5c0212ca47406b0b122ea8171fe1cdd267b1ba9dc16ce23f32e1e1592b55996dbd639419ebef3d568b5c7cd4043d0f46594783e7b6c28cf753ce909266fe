{"_id":"@noble/ciphers","_rev":"12-8508cf7bbe27434e3e5270ff3fce3d56","name":"@noble/ciphers","dist-tags":{"latest":"0.5.3"},"versions":{"0.1.2":{"name":"@noble/ciphers","version":"0.1.2","description":"Auditable & minimal JS implementation of AES SIV, Salsa20 and ChaCha20","scripts":{"bench":"node benchmark/index.js noble","bench:all":"node benchmark/index.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,js.map,d.ts.map} webcrypto esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.1","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"2.8.4","typescript":"5.0.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_slow":{"types":"./_slow.d.ts","import":"./esm/_slow.js","default":"./_slow.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/siv":{"types":"./webcrypto/siv.d.ts","import":"./esm/webcrypto/siv.js","default":"./webcrypto/siv.js"},"./webcrypto/ff1":{"types":"./webcrypto/ff1.d.ts","import":"./esm/webcrypto/ff1.js","default":"./webcrypto/ff1.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["cryptography","crypto","noble","cipher","ciphers","aes","gcm","siv","salsa20","chacha20","xsalsa20","xchacha20","poly1305","secretbox","rijndael"],"funding":"https://paulmillr.com/funding/","gitHead":"88bc7f77e18590de3ac9bb4d02f945a13609b7e7","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_id":"@noble/ciphers@0.1.2","_nodeVersion":"20.3.1","_npmVersion":"9.7.2","dist":{"integrity":"sha512-gIw/hMxp90MeE0c4niKkBrpp+MGaGpebTlBxilTk6a3qt7maWwjDT64OXi4Nnqjj/t8lNIO6XncJ6ES5gmek/w==","shasum":"c52d9dfa8a7b34811ba93c5bfd1d887c6d6addb8","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.1.2.tgz","fileCount":94,"unpackedSize":415190,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.1.2","provenance":{"predicateType":"https://slsa.dev/provenance/v0.2"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGLM+/EvDQNxVvJBgwltZC2yvr0ns8tWEV6aaQysncnYAiEA/VPV/N9OOP4uXrveJEjS3BHQ1xFsQj+8SYD35/rj5o8="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.1.2_1687995292661_0.85506778765882"},"_hasShrinkwrap":false},"0.1.3":{"name":"@noble/ciphers","version":"0.1.3","description":"Auditable & minimal JS implementation of Salsa20, ChaCha, Poly1305 & AES-SIV","scripts":{"bench":"node benchmark/index.js noble","bench:all":"node benchmark/index.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,js.map,d.ts.map} webcrypto esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.1","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"2.8.4","typescript":"5.0.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_slow":{"types":"./_slow.d.ts","import":"./esm/_slow.js","default":"./_slow.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/siv":{"types":"./webcrypto/siv.d.ts","import":"./esm/webcrypto/siv.js","default":"./webcrypto/siv.js"},"./webcrypto/ff1":{"types":"./webcrypto/ff1.d.ts","import":"./esm/webcrypto/ff1.js","default":"./webcrypto/ff1.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["cryptography","crypto","noble","cipher","ciphers","aes","gcm","siv","salsa20","chacha20","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael"],"funding":"https://paulmillr.com/funding/","gitHead":"9d8cca6f390aea735e530f08e3d863dfbd671c27","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_id":"@noble/ciphers@0.1.3","_nodeVersion":"20.3.1","_npmVersion":"9.7.2","dist":{"integrity":"sha512-L75KBG/jf6YNxSvV0w0tsC8OIOsLh9sk6mqLUNZ+3/UhDBrAHQAvTTspwMoBlB84ymupIhq+E9QOhr6H1g/xog==","shasum":"13d3e26dd9bfcb28cd5ea7640f2c28e8feb08e46","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.1.3.tgz","fileCount":94,"unpackedSize":419048,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.1.3","provenance":{"predicateType":"https://slsa.dev/provenance/v0.2"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBy0doCcnmPCeld0Bs9MfsyuD4RDg+R8rWM9wcukPFWjAiEAnRDXSZif8hRlOTBk3Dvhexz2T/Ns5J3q5/M/Z+RkrF0="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.1.3_1688082973843_0.21054799655518686"},"_hasShrinkwrap":false},"0.1.4":{"name":"@noble/ciphers","version":"0.1.4","description":"Auditable & minimal JS implementation of Salsa20, ChaCha, Poly1305 & AES-SIV","scripts":{"bench":"node benchmark/index.js noble","bench:all":"node benchmark/index.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm -r *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} webcrypto esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.1","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"2.8.4","typescript":"5.0.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/siv":{"types":"./webcrypto/siv.d.ts","import":"./esm/webcrypto/siv.js","default":"./webcrypto/siv.js"},"./webcrypto/ff1":{"types":"./webcrypto/ff1.d.ts","import":"./esm/webcrypto/ff1.js","default":"./webcrypto/ff1.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["cryptography","crypto","noble","cipher","ciphers","aes","gcm","siv","salsa20","chacha20","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.1.4","gitHead":"9be52190cbfcb11e58a70f6884e1ef141b99a4e2","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.4.0","_npmVersion":"9.8.0","dist":{"integrity":"sha512-d3ZR8vGSpy3v/nllS+bD/OMN5UZqusWiQqkyj7AwzTnhXFH72pF5oB4Ach6DQ50g5kXxC28LdaYBEpsyv9KOUQ==","shasum":"96327dca147829ed9eee0d96cfdf7c57915765f0","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.1.4.tgz","fileCount":109,"unpackedSize":440541,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.1.4","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCJtkTgxcqTMiPdNFl0Azpe2fjkpr6RSoynTEzTCI7dgwIhAJHNH8qKkeA+p8+5+QHi8j0nmir7m1empLdelyZ+Ei3U"}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.1.4_1689401285877_0.3914962647808313"},"_hasShrinkwrap":false},"0.2.0":{"name":"@noble/ciphers","version":"0.2.0","description":"Auditable & minimal JS implementation of Salsa20, ChaCha, Poly1305 & AES-SIV","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null; rm -r esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.1","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"2.8.4","typescript":"5.0.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./simple":{"types":"./simple.d.ts","import":"./esm/simple.js","default":"./simple.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/siv":{"types":"./webcrypto/siv.d.ts","import":"./esm/webcrypto/siv.js","default":"./webcrypto/siv.js"},"./webcrypto/ff1":{"types":"./webcrypto/ff1.d.ts","import":"./esm/webcrypto/ff1.js","default":"./webcrypto/ff1.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.2.0","gitHead":"2ab7b23fc24ce48b808519db2379b67fb64a3614","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.5.0","_npmVersion":"9.8.1","dist":{"integrity":"sha512-6YBxJDAapHSdd3bLDv6x2wRPwq4QFMUaB3HvljNBUTThDd12eSm7/3F+2lnfzx2jvM+S6Nsy0jEt9QbPqSwqRw==","shasum":"a12cda60f3cf1ab5d7c77068c3711d2366649ed7","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.2.0.tgz","fileCount":116,"unpackedSize":458783,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.2.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCC+Hoy3k1PB1klyAFwByhX7utbpMViE0R2UwoyJIQBcgIgY5rWExU3a4nfyc0UcBMhfrd7m5VMLYp++T752ZpX97s="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.2.0_1690821937962_0.5061862136777535"},"_hasShrinkwrap":false},"0.3.0":{"name":"@noble/ciphers","version":"0.3.0","description":"Auditable & minimal JS implementation of Salsa20, ChaCha, Poly1305 & AES-SIV","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null; rm -r esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.1","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"2.8.4","typescript":"5.0.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/siv":{"types":"./webcrypto/siv.d.ts","import":"./esm/webcrypto/siv.js","default":"./webcrypto/siv.js"},"./webcrypto/ff1":{"types":"./webcrypto/ff1.d.ts","import":"./esm/webcrypto/ff1.js","default":"./webcrypto/ff1.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.3.0","gitHead":"48f982a65d425e3469992bb95819a28dd946a324","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.5.1","_npmVersion":"9.8.1","dist":{"integrity":"sha512-ldbrnOjmNRwFdXcTM6uXDcxpMIFrbzAWNnpBPp4oTJTFF0XByGD6vf45WrehZGXRQTRVV+Zm8YP+EgEf+e4cWA==","shasum":"6ba3090afdc7a7051393486f6af210e62e0f04ec","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.3.0.tgz","fileCount":109,"unpackedSize":452809,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.3.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCVVRCe87okLMdLUCALhqWJSFPGFzBmSnqaRSlCLXNQywIgc5Y21W05k5QnkgOCGx84+F7aohKAQF5PFWGhoEkpg1c="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.3.0_1693442961584_0.25096887905314524"},"_hasShrinkwrap":false},"0.4.0":{"name":"@noble/ciphers","version":"0.4.0","description":"Auditable & minimal JS implementation of Salsa20, ChaCha & AES","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null; rm -r webcrypto esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.1","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"2.8.4","typescript":"5.0.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./_polyval":{"types":"./_polyval.d.ts","import":"./esm/_polyval.js","default":"./_polyval.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./ff1":{"types":"./ff1.d.ts","import":"./esm/ff1.js","default":"./ff1.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.4.0","gitHead":"9326efde01cb4c79d8aba0554c5973cab0b26dcd","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.8.1","_npmVersion":"10.2.1","dist":{"integrity":"sha512-xaUaUUDWbHIFSxaQ/pIe+33VG2mfJp6N/KxKLmZr5biWdNznCAmfu24QRhX10BbVAuqOahAoyp0S4M9md6GPDw==","shasum":"e3f69e3ce935683dd8dadb636652a5cb5cd5958c","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.4.0.tgz","fileCount":109,"unpackedSize":607103,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.4.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDeLk6bXuhbdlPozvsoCzkyUxlPMtweTNPqNOc3I8zWGgIhAIT709rvm6FfrDNI8lD/QtkElWYQaVxuuhHU8q/7DIfA"}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.4.0_1697736243470_0.7181132072713337"},"_hasShrinkwrap":false},"0.4.1":{"name":"@noble/ciphers","version":"0.4.1","description":"Auditable & minimal JS implementation of Salsa20, ChaCha and AES","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null; rm -r webcrypto esm/webcrypto 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","devDependencies":{"@scure/base":"1.1.3","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"3.1.1","typescript":"5.3.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/crypto":{"types":"./webcrypto/crypto.d.ts","node":{"import":"./esm/webcrypto/cryptoNode.js","default":"./webcrypto/cryptoNode.js"},"import":"./esm/webcrypto/crypto.js","default":"./webcrypto/crypto.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./_polyval":{"types":"./_polyval.d.ts","import":"./esm/_polyval.js","default":"./_polyval.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./ff1":{"types":"./ff1.d.ts","import":"./esm/ff1.js","default":"./ff1.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto/aes":{"types":"./webcrypto/aes.d.ts","import":"./esm/webcrypto/aes.js","default":"./webcrypto/aes.js"},"./webcrypto/utils":{"types":"./webcrypto/utils.d.ts","import":"./esm/webcrypto/utils.js","default":"./webcrypto/utils.js"}},"browser":{"node:crypto":false,"./webcrypto/crypto":"./webcrypto/crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv","ff1"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.4.1","gitHead":"1287b8598fc6429421bae1d6f166b083629d2779","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.10.0","_npmVersion":"10.2.5","dist":{"integrity":"sha512-QCOA9cgf3Rc33owG0AYBB9wszz+Ul2kramWN8tXG44Gyciud/tbkEqvxRF/IpqQaBpRBNi9f4jdNxqB2CQCIXg==","shasum":"977fc35f563a4ca315ebbc4cbb1f9b670bd54456","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.4.1.tgz","fileCount":109,"unpackedSize":612663,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.4.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDX7RABW/kmy3GjWtOeGfM+7cgFyCFNGhUM9cikCzwggAIgNMsF8KwZ2pBuN5sbhtKeLJEe5iKCfj7vWAFz9R2a6Pk="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.4.1_1702336679819_0.44505651109261524"},"_hasShrinkwrap":false},"0.5.0":{"name":"@noble/ciphers","version":"0.5.0","description":"Auditable & minimal JS implementation of Salsa20, ChaCha and AES","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","sideEffects":false,"devDependencies":{"@scure/base":"1.1.3","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"3.1.1","typescript":"5.3.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./_polyval":{"types":"./_polyval.d.ts","import":"./esm/_polyval.js","default":"./_polyval.js"},"./crypto":{"types":"./crypto.d.ts","node":{"import":"./esm/cryptoNode.js","default":"./cryptoNode.js"},"import":"./esm/crypto.js","default":"./crypto.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./ff1":{"types":"./ff1.d.ts","import":"./esm/ff1.js","default":"./ff1.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto":{"types":"./webcrypto.d.ts","import":"./esm/webcrypto.js","default":"./webcrypto.js"}},"browser":{"node:crypto":false,"./crypto":"./crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv","ff1"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.5.0","gitHead":"c558337e018fbeb591222944f07681582781b19d","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.11.0","_npmVersion":"10.4.0","dist":{"integrity":"sha512-HcXFhIRUgbSxFIGYfII5V4JsFGTyl93SKbSxIcIwj3qL1rhAxTyt/9l8V8XJHdOsrO4vBetPFMT+Lxjcx0i/4w==","shasum":"310c896cdc25c851f4c726ecd57dd7e376564798","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.5.0.tgz","fileCount":102,"unpackedSize":611395,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.5.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDVHxd76O2VYXcE7uwvfW/0tbq4pOdl5s9aWuAwS8rDuQIhAJg/j1VB88dpEZPH63wEqw6ELWFPrScC0hXxLFkOVYBu"}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.5.0_1707483277513_0.9749014218832865"},"_hasShrinkwrap":false},"0.5.1":{"name":"@noble/ciphers","version":"0.5.1","description":"Auditable & minimal JS implementation of Salsa20, ChaCha and AES","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build; npm i; npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","sideEffects":false,"devDependencies":{"@scure/base":"1.1.3","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"3.1.1","typescript":"5.3.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./_polyval":{"types":"./_polyval.d.ts","import":"./esm/_polyval.js","default":"./_polyval.js"},"./crypto":{"types":"./crypto.d.ts","node":{"import":"./esm/cryptoNode.js","default":"./cryptoNode.js"},"import":"./esm/crypto.js","default":"./crypto.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./ff1":{"types":"./ff1.d.ts","import":"./esm/ff1.js","default":"./ff1.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto":{"types":"./webcrypto.d.ts","import":"./esm/webcrypto.js","default":"./webcrypto.js"}},"browser":{"node:crypto":false,"./crypto":"./crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv","ff1"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.5.1","gitHead":"1a951ca6bd3aad0c2e11b05c14157d2b86ad2d8a","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.11.0","_npmVersion":"10.4.0","dist":{"integrity":"sha512-aNE06lbe36ifvMbbWvmmF/8jx6EQPu2HVg70V95T+iGjOuYwPpAccwAQc2HlXO2D0aiQ3zavbMga4jjWnrpiPA==","shasum":"292f388b69c9ed80d49dca1a5cbfd4ff06852111","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.5.1.tgz","fileCount":102,"unpackedSize":611418,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.5.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDV2ioKd62LjGuFa4NDTZwCqnfU6fuIMUowxXNL3yJYyAIgeKXl0SmLAOCtuzD7logSeZAV0VK5QVaPV4fqmiXVkGI="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.5.1_1707502222373_0.975196263203268"},"_hasShrinkwrap":false},"0.5.2":{"name":"@noble/ciphers","version":"0.5.2","description":"Auditable & minimal JS implementation of Salsa20, ChaCha and AES","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build && npm i && npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","sideEffects":false,"devDependencies":{"@paulmillr/jsbt":"0.1.0","@scure/base":"1.1.3","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"3.1.1","typescript":"5.3.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./_polyval":{"types":"./_polyval.d.ts","import":"./esm/_polyval.js","default":"./_polyval.js"},"./crypto":{"types":"./crypto.d.ts","node":{"import":"./esm/cryptoNode.js","default":"./cryptoNode.js"},"import":"./esm/crypto.js","default":"./crypto.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./ff1":{"types":"./ff1.d.ts","import":"./esm/ff1.js","default":"./ff1.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto":{"types":"./webcrypto.d.ts","import":"./esm/webcrypto.js","default":"./webcrypto.js"}},"browser":{"node:crypto":false,"./crypto":"./crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv","ff1"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.5.2","gitHead":"3359d966278df56fb0a8a5ef2ec4a317396d6179","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.11.1","_npmVersion":"10.5.0","dist":{"integrity":"sha512-GADtQmZCdgbnNp+daPLc3OY3ibEtGGDV/+CzeM3MFnhiQ7ELQKlsHWYq0YbYUXx4jU3/Y1erAxU6r+hwpewqmQ==","shasum":"879367fd51d59185259eb844d5b9a78f408b4a12","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.5.2.tgz","fileCount":103,"unpackedSize":622478,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.5.2","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAJuqLk+IAclwcFV6yPucDVzW3zC0Ki8M/QaYaJQLeqSAiB9pMojhwJT1vBP28CDCel5aPrC2vEc8FHiJrXEVeqpXQ=="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.5.2_1711386132208_0.8747932021535318"},"_hasShrinkwrap":false},"0.5.3":{"name":"@noble/ciphers","version":"0.5.3","description":"Auditable & minimal JS implementation of Salsa20, ChaCha and AES","scripts":{"bench":"node benchmark/aead.js noble && node benchmark/ciphers.js noble","bench:all":"node benchmark/{aead,ciphers,poly}.js","bench:install":"cd benchmark && npm install && cd ../../","build":"npm run build:clean; tsc && tsc -p tsconfig.esm.json","build:release":"cd build && npm i && npm run build","build:clean":"rm *.{js,d.ts,js.map,d.ts.map} esm/*.{js,d.ts,js.map,d.ts.map} 2> /dev/null","lint":"prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","format":"prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts,mjs}'","test":"node test/index.js"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"homepage":"https://paulmillr.com/noble/","repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"license":"MIT","sideEffects":false,"devDependencies":{"@paulmillr/jsbt":"0.1.0","@scure/base":"1.1.3","fast-check":"3.0.0","micro-bmark":"0.3.1","micro-should":"0.4.0","prettier":"3.1.1","typescript":"5.3.2"},"main":"index.js","exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./_micro":{"types":"./_micro.d.ts","import":"./esm/_micro.js","default":"./_micro.js"},"./_poly1305":{"types":"./_poly1305.d.ts","import":"./esm/_poly1305.js","default":"./_poly1305.js"},"./_polyval":{"types":"./_polyval.d.ts","import":"./esm/_polyval.js","default":"./_polyval.js"},"./crypto":{"types":"./crypto.d.ts","node":{"import":"./esm/cryptoNode.js","default":"./cryptoNode.js"},"import":"./esm/crypto.js","default":"./crypto.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./chacha":{"types":"./chacha.d.ts","import":"./esm/chacha.js","default":"./chacha.js"},"./salsa":{"types":"./salsa.d.ts","import":"./esm/salsa.js","default":"./salsa.js"},"./ff1":{"types":"./ff1.d.ts","import":"./esm/ff1.js","default":"./ff1.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./webcrypto":{"types":"./webcrypto.d.ts","import":"./esm/webcrypto.js","default":"./webcrypto.js"}},"browser":{"node:crypto":false,"./crypto":"./crypto.js"},"keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv","ff1"],"funding":"https://paulmillr.com/funding/","_id":"@noble/ciphers@0.5.3","gitHead":"df9fa72cbbd553c7f86082ea3b7c4c493a83bcd7","types":"./index.d.ts","bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"_nodeVersion":"20.12.2","_npmVersion":"10.7.0","dist":{"integrity":"sha512-B0+6IIHiqEs3BPMT0hcRmHvEj2QHOLu+uwt+tqDDeVd0oyVzh7BPrDcPjRnV1PV/5LaknXJJQvOuRGR0zQJz+w==","shasum":"48b536311587125e0d0c1535f73ec8375cd76b23","tarball":"https://registry.npmjs.org/@noble/ciphers/-/ciphers-0.5.3.tgz","fileCount":103,"unpackedSize":624276,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@noble%2fciphers@0.5.3","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDdKqsrvtxgJDCUKKFllz3Tk964RpypRbU/OTQe2HWPrAIhALF0sak214Hk/dJK+D+jx5NjwuNqe0oQPxP1Cxu7ImHS"}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ciphers_0.5.3_1715003011882_0.9925035315540254"},"_hasShrinkwrap":false}},"time":{"created":"2023-06-28T23:23:34.368Z","0.1.0":"2023-06-28T23:23:34.629Z","modified":"2024-05-06T13:43:32.488Z","0.1.2":"2023-06-28T23:34:52.873Z","0.1.3":"2023-06-29T23:56:14.109Z","0.1.4":"2023-07-15T06:08:06.143Z","0.2.0":"2023-07-31T16:45:38.156Z","0.3.0":"2023-08-31T00:49:21.827Z","0.4.0":"2023-10-19T17:24:03.690Z","0.4.1":"2023-12-11T23:17:59.983Z","0.5.0":"2024-02-09T12:54:37.675Z","0.5.1":"2024-02-09T18:10:22.584Z","0.5.2":"2024-03-25T17:02:12.371Z","0.5.3":"2024-05-06T13:43:32.048Z"},"maintainers":[{"name":"paulmillr","email":"paul@paulmillr.com"}],"description":"Auditable & minimal JS implementation of Salsa20, ChaCha and AES","homepage":"https://paulmillr.com/noble/","keywords":["salsa20","chacha","aes","cryptography","crypto","noble","cipher","ciphers","xsalsa20","xchacha20","poly1305","xsalsa20poly1305","chacha20poly1305","xchacha20poly1305","secretbox","rijndael","siv","ff1"],"repository":{"type":"git","url":"git+https://github.com/paulmillr/noble-ciphers.git"},"author":{"name":"Paul Miller","url":"https://paulmillr.com"},"bugs":{"url":"https://github.com/paulmillr/noble-ciphers/issues"},"license":"MIT","readme":"# noble-ciphers\n\nAuditable & minimal JS implementation of Salsa20, ChaCha and AES.\n\n- 🔒 Auditable\n- 🔻 Tree-shaking-friendly: use only what's necessary, other code won't be included\n- 🏎 [Ultra-fast](#speed), hand-optimized for caveats of JS engines\n- 🔍 Unique tests ensure correctness: property-based, cross-library and Wycheproof vectors\n- 💼 AES: ECB, CBC, CTR, CFB, GCM, SIV (nonce misuse-resistant)\n- 💃 Salsa20, ChaCha, XSalsa20, XChaCha, Poly1305, ChaCha8, ChaCha12\n- 🥈 Two AES implementations: choose between friendly webcrypto wrapper and pure JS one\n- 🪶 45KB (8KB gzipped) for everything, 10KB (3KB gzipped) for ChaCha build\n\nFor discussions, questions and support, visit\n[GitHub Discussions](https://github.com/paulmillr/noble-ciphers/discussions)\nsection of the repository.\n\n### This library belongs to _noble_ cryptography\n\n> **noble cryptography** — high-security, easily auditable set of contained cryptographic libraries and tools.\n\n- Zero or minimal dependencies\n- Highly readable TypeScript / JS code\n- PGP-signed releases and transparent NPM builds\n- All libraries:\n  [ciphers](https://github.com/paulmillr/noble-ciphers),\n  [curves](https://github.com/paulmillr/noble-curves),\n  [hashes](https://github.com/paulmillr/noble-hashes),\n  [post-quantum](https://github.com/paulmillr/noble-post-quantum),\n  4kb [secp256k1](https://github.com/paulmillr/noble-secp256k1) /\n  [ed25519](https://github.com/paulmillr/noble-ed25519)\n- [Check out homepage](https://paulmillr.com/noble/)\n  for reading resources, documentation and apps built with noble\n\n## Usage\n\n> npm install @noble/ciphers\n\nWe support all major platforms and runtimes.\nFor [Deno](https://deno.land), ensure to use\n[npm specifier](https://deno.land/manual@v1.28.0/node/npm_specifiers).\nFor React Native, you may need a\n[polyfill for getRandomValues](https://github.com/LinusU/react-native-get-random-values).\nA standalone file\n[noble-ciphers.js](https://github.com/paulmillr/noble-ciphers/releases) is also available.\n\n```js\n// import * from '@noble/ciphers'; // Error: use sub-imports, to ensure small app size\nimport { xchacha20poly1305 } from '@noble/ciphers/chacha';\n// import { xchacha20poly1305 } from 'npm:@noble/ciphers@0.5.0/chacha'; // Deno\n```\n\n- [Examples](#examples)\n  - [Encrypt with XChaCha20-Poly1305](#encrypt-with-xchacha20-poly1305)\n  - [Encrypt with AES-256-GCM](#encrypt-with-aes-256-gcm)\n  - [Use existing key instead of a new one](#use-existing-key-instead-of-a-new-one)\n  - [Encrypt without nonce](#encrypt-without-nonce)\n  - [Use same array for input and output](#use-same-array-for-input-and-output)\n  - [All imports](#all-imports)\n- [Implementations](#implementations)\n  - [Salsa20](#salsa)\n  - [ChaCha](#chacha)\n  - [AES](#aes)\n  - [Webcrypto AES](#webcrypto-aes)\n  - [Poly1305, GHash, Polyval](#poly1305-ghash-polyval)\n  - [FF1 format-preserving encryption](#ff1)\n  - [Managed nonces](#managed-nonces)\n- [Guidance](#guidance)\n  - [Which cipher should I pick?](#which-cipher-should-i-pick)\n  - [How to encrypt properly](#how-to-encrypt-properly)\n  - [Nonces](#nonces)\n  - [Encryption limits](#encryption-limits)\n  - [AES internals and block modes](#aes-internals-and-block-modes)\n- [Security](#security)\n- [Speed](#speed)\n- [Upgrading](#upgrading)\n- [Contributing & testing](#contributing--testing)\n- [Resources](#resources)\n\n## Examples\n\n#### Encrypt with XChaCha20-Poly1305\n\n```js\nimport { xchacha20poly1305 } from '@noble/ciphers/chacha';\nimport { utf8ToBytes } from '@noble/ciphers/utils';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\nconst key = randomBytes(32);\nconst nonce = randomBytes(24);\nconst chacha = xchacha20poly1305(key, nonce);\nconst data = utf8ToBytes('hello, noble');\nconst ciphertext = chacha.encrypt(data);\nconst data_ = chacha.decrypt(ciphertext); // utils.bytesToUtf8(data_) === data\n```\n\n#### Encrypt with AES-256-GCM\n\n```js\nimport { gcm } from '@noble/ciphers/aes';\nimport { utf8ToBytes } from '@noble/ciphers/utils';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\nconst key = randomBytes(32);\nconst nonce = randomBytes(24);\nconst aes = gcm(key, nonce);\nconst data = utf8ToBytes('hello, noble');\nconst ciphertext = aes.encrypt(data);\nconst data_ = aes.decrypt(ciphertext); // utils.bytesToUtf8(data_) === data\n```\n\n#### Use existing key instead of a new one\n\n```js\nconst key = new Uint8Array([\n  169, 88, 160, 139, 168, 29, 147, 196, 14, 88, 237, 76, 243, 177, 109, 140, 195, 140, 80, 10, 216,\n  134, 215, 71, 191, 48, 20, 104, 189, 37, 38, 55,\n]);\nconst nonce = new Uint8Array([\n  180, 90, 27, 63, 160, 191, 150, 33, 67, 212, 86, 71, 144, 6, 200, 102, 218, 32, 23, 147, 8, 41,\n  147, 11,\n]);\n// or, hex:\nimport { hexToBytes } from '@noble/ciphers/utils';\nconst key2 = hexToBytes('4b7f89bac90a1086fef73f5da2cbe93b2fae9dfbf7678ae1f3e75fd118ddf999');\nconst nonce2 = hexToBytes('9610467513de0bbd7c4cc2c3c64069f1802086fbd3232b13');\n```\n\n#### Encrypt without nonce\n\n```js\nimport { xchacha20poly1305 } from '@noble/ciphers/chacha';\nimport { managedNonce } from '@noble/ciphers/webcrypto';\nimport { hexToBytes, utf8ToBytes } from '@noble/ciphers/utils';\nconst key = hexToBytes('fa686bfdffd3758f6377abbc23bf3d9bdc1a0dda4a6e7f8dbdd579fa1ff6d7e1');\nconst chacha = managedNonce(xchacha20poly1305)(key); // manages nonces for you\nconst data = utf8ToBytes('hello, noble');\nconst ciphertext = chacha.encrypt(data);\nconst data_ = chacha.decrypt(ciphertext);\n```\n\n#### Use same array for input and output\n\n```js\nimport { chacha20poly1305 } from '@noble/ciphers/chacha';\nimport { utf8ToBytes } from '@noble/ciphers/utils';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\n\nconst key = randomBytes(32);\nconst nonce = randomBytes(12);\nconst buf = new Uint8Array(12 + 16);\nconst _data = utf8ToBytes('hello, noble');\nbuf.set(_data, 0); // first 12 bytes\nconst _12b = buf.subarray(0, 12);\n\nconst chacha = chacha20poly1305(key, nonce);\nchacha.encrypt(_12b, buf);\nchacha.decrypt(buf, _12b); // _12b now same as _data\n```\n\n#### All imports\n\n```js\nimport { gcm, siv } from '@noble/ciphers/aes';\nimport { xsalsa20poly1305 } from '@noble/ciphers/salsa';\nimport { chacha20poly1305, xchacha20poly1305 } from '@noble/ciphers/chacha';\n\n// Unauthenticated encryption: make sure to use HMAC or similar\nimport { ctr, cfb, cbc, ecb } from '@noble/ciphers/aes';\nimport { salsa20, xsalsa20 } from '@noble/ciphers/salsa';\nimport { chacha20, xchacha20, chacha8, chacha12 } from '@noble/ciphers/chacha';\n\n// Utilities\nimport { bytesToHex, hexToBytes, bytesToUtf8, utf8ToBytes } from '@noble/ciphers/utils';\nimport { managedNonce, randomBytes } from '@noble/ciphers/webcrypto';\n```\n\n## Implementations\n\n### Salsa\n\n```js\nimport { xsalsa20poly1305 } from '@noble/ciphers/salsa';\nimport { secretbox } from '@noble/ciphers/salsa'; // == xsalsa20poly1305\nimport { salsa20, xsalsa20 } from '@noble/ciphers/salsa';\n```\n\n[Salsa20](https://cr.yp.to/snuffle.html) stream cipher was released in 2005.\nSalsa's goal was to implement AES replacement that does not rely on S-Boxes,\nwhich are hard to implement in a constant-time manner.\nSalsa20 is usually faster than AES, a big deal on slow, budget mobile phones.\n\n[XSalsa20](https://cr.yp.to/snuffle/xsalsa-20110204.pdf), extended-nonce\nvariant was released in 2008. It switched nonces from 96-bit to 192-bit,\nand became safe to be picked at random.\n\nNacl / Libsodium popularized term \"secretbox\", a simple black-box\nauthenticated encryption. Secretbox is just xsalsa20-poly1305. We provide the\nalias and corresponding seal / open methods. We don't provide \"box\" or \"sealedbox\".\n\nCheck out [PDF](https://cr.yp.to/snuffle/salsafamily-20071225.pdf) and\n[wiki](https://en.wikipedia.org/wiki/Salsa20).\n\n### ChaCha\n\n```js\nimport { chacha20poly1305, xchacha20poly1305 } from '@noble/ciphers/chacha';\nimport { chacha20, xchacha20, chacha8, chacha12 } from '@noble/ciphers/chacha';\n```\n\n[ChaCha20](https://cr.yp.to/chacha.html) stream cipher was released\nin 2008. ChaCha aims to increase the diffusion per round, but had slightly less\ncryptanalysis. It was standardized in\n[RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and is now used in TLS 1.3.\n\n[XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)\nextended-nonce variant is also provided. Similar to XSalsa, it's safe to use with\nrandomly-generated nonces.\n\nCheck out [PDF](http://cr.yp.to/chacha/chacha-20080128.pdf) and [wiki](https://en.wikipedia.org/wiki/Salsa20).\n\n### AES\n\n```js\nimport { gcm, siv, ctr, cfb, cbc, ecb } from '@noble/ciphers/aes';\nimport { randomBytes } from '@noble/ciphers/webcrypto';\nconst plaintext = new Uint8Array(32).fill(16);\nconst key = randomBytes(32); // 24 for AES-192, 16 for AES-128\nfor (let cipher of [gcm, siv]) {\n  const stream = cipher(key, randomBytes(12));\n  const ciphertext_ = stream.encrypt(plaintext);\n  const plaintext_ = stream.decrypt(ciphertext_);\n}\nfor (const cipher of [ctr, cbc, cbc]) {\n  const stream = cipher(key, randomBytes(16));\n  const ciphertext_ = stream.encrypt(plaintext);\n  const plaintext_ = stream.decrypt(ciphertext_);\n}\nfor (const cipher of [ecb]) {\n  const stream = cipher(key);\n  const ciphertext_ = stream.encrypt(plaintext);\n  const plaintext_ = stream.decrypt(ciphertext_);\n}\n```\n\n[AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nis a variant of Rijndael block cipher, standardized by NIST in 2001.\nWe provide the fastest available pure JS implementation.\n\nWe support AES-128, AES-192 and AES-256: the mode is selected dynamically,\nbased on key length (16, 24, 32).\n\n[AES-GCM-SIV](https://en.wikipedia.org/wiki/AES-GCM-SIV)\nnonce-misuse-resistant mode is also provided. It's recommended to use it,\nto prevent catastrophic consequences of nonce reuse. Our implementation of SIV\nhas the same speed as GCM: there is no performance hit.\n\nCheck out [AES internals and block modes](#aes-internals-and-block-modes).\n\n### Webcrypto AES\n\n```js\nimport { gcm, ctr, cbc, randomBytes } from '@noble/ciphers/webcrypto';\nconst plaintext = new Uint8Array(32).fill(16);\nconst key = randomBytes(32);\nfor (const cipher of [gcm]) {\n  const stream = cipher(key, randomBytes(12));\n  const ciphertext_ = await stream.encrypt(plaintext);\n  const plaintext_ = await stream.decrypt(ciphertext_);\n}\nfor (const cipher of [ctr, cbc]) {\n  const stream = cipher(key, randomBytes(16));\n  const ciphertext_ = await stream.encrypt(plaintext);\n  const plaintext_ = await stream.decrypt(ciphertext_);\n}\n```\n\nWe also have a separate wrapper over WebCrypto built-in.\n\nIt's the same as using `crypto.subtle`, but with massively simplified API.\n\nUnlike pure js version, it's asynchronous.\n\n### Poly1305, GHash, Polyval\n\n```js\nimport { poly1305 } from '@noble/ciphers/_poly1305';\nimport { ghash, polyval } from '@noble/ciphers/_polyval';\n```\n\nWe expose polynomial-evaluation MACs: [Poly1305](https://cr.yp.to/mac.html),\nAES-GCM's [GHash](https://en.wikipedia.org/wiki/Galois/Counter_Mode) and\nAES-SIV's [Polyval](https://en.wikipedia.org/wiki/AES-GCM-SIV).\n\nPoly1305 ([PDF](https://cr.yp.to/mac/poly1305-20050329.pdf),\n[wiki](https://en.wikipedia.org/wiki/Poly1305))\nis a fast and parallel secret-key message-authentication code suitable for\na wide variety of applications. It was standardized in\n[RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and is now used in TLS 1.3.\n\nPolynomial MACs are not perfect for every situation:\nthey lack Random Key Robustness: the MAC can be forged, and can't\nbe used in PAKE schemes. See\n[invisible salamanders attack](https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/).\nTo combat invisible salamanders, `hash(key)` can be included in ciphertext,\nhowever, this would violate ciphertext indistinguishability:\nan attacker would know which key was used - so `HKDF(key, i)`\ncould be used instead.\n\n### FF1\n\nFormat-preserving encryption algorithm (FPE-FF1) specified in NIST Special Publication 800-38G.\n[See more info](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38G.pdf).\n\n### Managed nonces\n\n```js\nimport { managedNonce } from '@noble/ciphers/webcrypto';\nimport { gcm, siv, ctr, cbc, cbc, ecb } from '@noble/ciphers/aes';\nimport { xsalsa20poly1305 } from '@noble/ciphers/salsa';\nimport { chacha20poly1305, xchacha20poly1305 } from '@noble/ciphers/chacha';\n\nconst wgcm = managedNonce(gcm);\nconst wsiv = managedNonce(siv);\nconst wcbc = managedNonce(cbc);\nconst wctr = managedNonce(ctr);\nconst wsalsapoly = managedNonce(xsalsa20poly1305);\nconst wchacha = managedNonce(chacha20poly1305);\nconst wxchacha = managedNonce(xchacha20poly1305);\n\n// Now:\nconst encrypted = wgcm(key).encrypt(data); // no nonces\n```\n\nWe provide API that manages nonce internally instead of exposing them to library's user.\n\nFor `encrypt`, a `nonceBytes`-length buffer is fetched from CSPRNG and prenended to encrypted ciphertext.\n\nFor `decrypt`, first `nonceBytes` of ciphertext are treated as nonce.\n\n## Guidance\n\n### Which cipher should I pick?\n\nXChaCha20-Poly1305 is the safest bet these days.\nAES-GCM-SIV is the second safest.\nAES-GCM is the third.\n\n### How to encrypt properly\n\n- Use unpredictable key with enough entropy\n  - Random key must be using cryptographically secure random number generator (CSPRNG), not `Math.random` etc.\n  - Non-random key generated from KDF is fine\n  - Re-using key is fine, but be aware of rules for cryptographic key wear-out and [encryption limits](#encryption-limits)\n- Use new nonce every time and [don't repeat it](#nonces)\n  - chacha and salsa20 are fine for sequential counters that _never_ repeat: `01, 02...`\n  - xchacha and xsalsa20 should be used for random nonces instead\n- Prefer authenticated encryption (AEAD)\n  - HMAC+ChaCha / HMAC+AES / chacha20poly1305 / aes-gcm is good\n  - chacha20 without poly1305 or hmac / aes-ctr / aes-cbc is bad\n  - Flipping bits or ciphertext substitution won't be detected in unauthenticated ciphers\n- Don't re-use keys between different protocols\n  - For example, using secp256k1 key in AES is bad\n  - Use hkdf or, at least, a hash function to create sub-key instead\n\n### Nonces\n\nMost ciphers need a key and a nonce (aka initialization vector / IV) to encrypt a data:\n\n    ciphertext = encrypt(plaintext, key, nonce)\n\nRepeating (key, nonce) pair with different plaintexts would allow an attacker to decrypt it:\n\n    ciphertext_a = encrypt(plaintext_a, key, nonce)\n    ciphertext_b = encrypt(plaintext_b, key, nonce)\n    stream_diff = xor(ciphertext_a, ciphertext_b)   # Break encryption\n\nSo, you can't repeat nonces. One way of doing so is using counters:\n\n    for i in 0..:\n        ciphertext[i] = encrypt(plaintexts[i], key, i)\n\nAnother is generating random nonce every time:\n\n    for i in 0..:\n        rand_nonces[i] = random()\n        ciphertext[i] = encrypt(plaintexts[i], key, rand_nonces[i])\n\nCounters are OK, but it's not always possible to store current counter value:\ne.g. in decentralized, unsyncable systems.\n\nRandomness is OK, but there's a catch:\nChaCha20 and AES-GCM use 96-bit / 12-byte nonces, which implies\nhigher chance of collision. In the example above,\n`random()` can collide and produce repeating nonce.\n\nTo safely use random nonces, utilize XSalsa20 or XChaCha:\nthey increased nonce length to 192-bit, minimizing a chance of collision.\nAES-SIV is also fine. In situations where you can't use eXtended-nonce\nalgorithms, key rotation is advised. hkdf would work great for this case.\n\n### Encryption limits\n\nA \"protected message\" would mean a probability of `2**-50` that a passive attacker\nsuccessfully distinguishes the ciphertext outputs of the AEAD scheme from the outputs\nof a random function. See [draft-irtf-cfrg-aead-limits](https://datatracker.ietf.org/doc/draft-irtf-cfrg-aead-limits/) for details.\n\n- Max message size:\n  - AES-GCM: ~68GB, `2**36-256`\n  - Salsa, ChaCha, XSalsa, XChaCha: ~256GB, `2**38-64`\n- Max amount of protected messages, under same key:\n  - AES-GCM: `2**32.5`\n  - Salsa, ChaCha: `2**46`, but only integrity is affected, not confidentiality\n  - XSalsa, XChaCha: `2**72`\n- Max amount of protected messages, across all keys:\n  - AES-GCM: `2**69/B` where B is max blocks encrypted by a key. Meaning\n    `2**59` for 1KB, `2**49` for 1MB, `2**39` for 1GB\n  - Salsa, ChaCha, XSalsa, XChaCha: `2**100`\n\n##### AES internals and block modes\n\n`cipher = encrypt(block, key)`. Data is split into 128-bit blocks. Encrypted in 10/12/14 rounds (128/192/256bit). Every round does:\n\n1. **S-box**, table substitution\n2. **Shift rows**, cyclic shift left of all rows of data array\n3. **Mix columns**, multiplying every column by fixed polynomial\n4. **Add round key**, round_key xor i-th column of array\n\nFor non-deterministic (not ECB) schemes, initialization vector (IV) is mixed to block/key;\nand each new round either depends on previous block's key, or on some counter.\n\n- ECB — simple deterministic replacement. Dangerous: always map x to y. See [AES Penguin](https://words.filippo.io/the-ecb-penguin/)\n- CBC — key is previous round’s block. Hard to use: need proper padding, also needs MAC\n- CTR — counter, allows to create streaming cipher. Requires good IV. Parallelizable. OK, but no MAC\n- GCM — modern CTR, parallel, with MAC\n- SIV — synthetic initialization vector, nonce-misuse-resistant. Guarantees that, when a nonce is repeated,\n  the only security loss is that identical plaintexts will produce identical ciphertexts.\n- XTS — used in hard drives. Similar to ECB (deterministic), but has `[i][j]`\n  tweak arguments corresponding to sector i and 16-byte block (part of sector) j. Not authenticated!\n\nGCM / SIV are not ideal:\n\n- Conservative key wear-out is `2**32` (4B) msgs\n- MAC can be forged: see Poly1305 section above. Same for SIV\n\n## Security\n\nThe library has not been independently audited yet.\n\nIt is tested against property-based, cross-library and Wycheproof vectors,\nand has fuzzing by [Guido Vranken's cryptofuzz](https://github.com/guidovranken/cryptofuzz).\n\nIf you see anything unusual: investigate and report.\n\n### Constant-timeness\n\n_JIT-compiler_ and _Garbage Collector_ make \"constant time\" extremely hard to\nachieve [timing attack](https://en.wikipedia.org/wiki/Timing_attack) resistance\nin a scripting language. Which means _any other JS library can't have\nconstant-timeness_. Even statically typed Rust, a language without GC,\n[makes it harder to achieve constant-time](https://www.chosenplaintext.ca/open-source/rust-timing-shield/security)\nfor some cases. If your goal is absolute security, don't use any JS lib — including bindings to native ones.\nUse low-level libraries & languages. Nonetheless we're targetting algorithmic constant time.\n\nAES uses T-tables, which means it can't be done in constant-time in JS.\n\n### Supply chain security\n\n- **Commits** are signed with PGP keys, to prevent forgery. Make sure to verify commit signatures.\n- **Releases** are transparent and built on GitHub CI. Make sure to verify [provenance](https://docs.npmjs.com/generating-provenance-statements) logs\n- **Rare releasing** is followed to ensure less re-audit need for end-users\n- **Dependencies** are minimized and locked-down:\n  - If your app has 500 dependencies, any dep could get hacked and you'll be downloading\n    malware with every install. We make sure to use as few dependencies as possible\n  - We prevent automatic dependency updates by locking-down version ranges. Every update is checked with `npm-diff`\n- **Dev Dependencies** are only used if you want to contribute to the repo. They are disabled for end-users:\n  - scure-base, micro-bmark and micro-should are developed by the same author and follow identical security practices\n  - prettier (linter), fast-check (property-based testing) and typescript are used for code quality, vector generation and ts compilation. The packages are big, which makes it hard to audit their source code thoroughly and fully\n\n### Randomness\n\nWe're deferring to built-in\n[crypto.getRandomValues](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues)\nwhich is considered cryptographically secure (CSPRNG).\n\nIn the past, browsers had bugs that made it weak: it may happen again.\nImplementing a userspace CSPRNG to get resilient to the weakness\nis even worse: there is no reliable userspace source of quality entropy.\n\n## Speed\n\nTo summarize, noble is the fastest JS implementation of Salsa, ChaCha and AES.\n\nYou can gain additional speed-up and\navoid memory allocations by passing `output`\nuint8array into encrypt / decrypt methods.\n\nBenchmark results on Apple M2 with node v20:\n\n```\nencrypt (64B)\n├─xsalsa20poly1305 x 485,672 ops/sec @ 2μs/op\n├─chacha20poly1305 x 466,200 ops/sec @ 2μs/op\n├─xchacha20poly1305 x 312,500 ops/sec @ 3μs/op\n├─aes-256-gcm x 151,057 ops/sec @ 6μs/op\n└─aes-256-gcm-siv x 124,984 ops/sec @ 8μs/op\nencrypt (1KB)\n├─xsalsa20poly1305 x 146,477 ops/sec @ 6μs/op\n├─chacha20poly1305 x 145,518 ops/sec @ 6μs/op\n├─xchacha20poly1305 x 126,119 ops/sec @ 7μs/op\n├─aes-256-gcm x 43,207 ops/sec @ 23μs/op\n└─aes-256-gcm-siv x 39,363 ops/sec @ 25μs/op\nencrypt (8KB)\n├─xsalsa20poly1305 x 23,773 ops/sec @ 42μs/op\n├─chacha20poly1305 x 24,134 ops/sec @ 41μs/op\n├─xchacha20poly1305 x 23,520 ops/sec @ 42μs/op\n├─aes-256-gcm x 8,420 ops/sec @ 118μs/op\n└─aes-256-gcm-siv x 8,126 ops/sec @ 123μs/op\nencrypt (1MB)\n├─xsalsa20poly1305 x 195 ops/sec @ 5ms/op\n├─chacha20poly1305 x 199 ops/sec @ 5ms/op\n├─xchacha20poly1305 x 198 ops/sec @ 5ms/op\n├─aes-256-gcm x 76 ops/sec @ 13ms/op\n└─aes-256-gcm-siv x 78 ops/sec @ 12ms/op\n```\n\nUnauthenticated encryption:\n\n```\nencrypt (64B)\n├─salsa x 1,287,001 ops/sec @ 777ns/op\n├─chacha x 1,555,209 ops/sec @ 643ns/op\n├─xsalsa x 938,086 ops/sec @ 1μs/op\n└─xchacha x 920,810 ops/sec @ 1μs/op\nencrypt (1KB)\n├─salsa x 353,107 ops/sec @ 2μs/op\n├─chacha x 377,216 ops/sec @ 2μs/op\n├─xsalsa x 331,674 ops/sec @ 3μs/op\n└─xchacha x 336,247 ops/sec @ 2μs/op\nencrypt (8KB)\n├─salsa x 57,084 ops/sec @ 17μs/op\n├─chacha x 59,520 ops/sec @ 16μs/op\n├─xsalsa x 57,097 ops/sec @ 17μs/op\n└─xchacha x 58,278 ops/sec @ 17μs/op\nencrypt (1MB)\n├─salsa x 479 ops/sec @ 2ms/op\n├─chacha x 491 ops/sec @ 2ms/op\n├─xsalsa x 483 ops/sec @ 2ms/op\n└─xchacha x 492 ops/sec @ 2ms/op\n\nAES\nencrypt (64B)\n├─ctr-256 x 689,179 ops/sec @ 1μs/op\n├─cbc-256 x 639,795 ops/sec @ 1μs/op\n└─ecb-256 x 668,449 ops/sec @ 1μs/op\nencrypt (1KB)\n├─ctr-256 x 93,668 ops/sec @ 10μs/op\n├─cbc-256 x 94,428 ops/sec @ 10μs/op\n└─ecb-256 x 151,699 ops/sec @ 6μs/op\nencrypt (8KB)\n├─ctr-256 x 13,342 ops/sec @ 74μs/op\n├─cbc-256 x 13,664 ops/sec @ 73μs/op\n└─ecb-256 x 22,426 ops/sec @ 44μs/op\nencrypt (1MB)\n├─ctr-256 x 106 ops/sec @ 9ms/op\n├─cbc-256 x 109 ops/sec @ 9ms/op\n└─ecb-256 x 179 ops/sec @ 5ms/op\n```\n\nCompare to other implementations:\n\n```\nxsalsa20poly1305 (encrypt, 1MB)\n├─tweetnacl x 108 ops/sec @ 9ms/op\n└─noble x 190 ops/sec @ 5ms/op\n\nchacha20poly1305 (encrypt, 1MB)\n├─node x 1,360 ops/sec @ 735μs/op\n├─stablelib x 117 ops/sec @ 8ms/op\n└─noble x 193 ops/sec @ 5ms/op\n\nchacha (encrypt, 1MB)\n├─node x 2,035 ops/sec @ 491μs/op\n├─stablelib x 206 ops/sec @ 4ms/op\n└─noble x 474 ops/sec @ 2ms/op\n\nctr-256 (encrypt, 1MB)\n├─node x 3,530 ops/sec @ 283μs/op\n├─stablelib x 70 ops/sec @ 14ms/op\n├─aesjs x 31 ops/sec @ 32ms/op\n├─noble-webcrypto x 4,589 ops/sec @ 217μs/op\n└─noble x 107 ops/sec @ 9ms/op\n\ncbc-256 (encrypt, 1MB)\n├─node x 993 ops/sec @ 1ms/op\n├─stablelib x 63 ops/sec @ 15ms/op\n├─aesjs x 29 ops/sec @ 34ms/op\n├─noble-webcrypto x 1,087 ops/sec @ 919μs/op\n└─noble x 110 ops/sec @ 9ms/op\n\ngcm-256 (encrypt, 1MB)\n├─node x 3,196 ops/sec @ 312μs/op\n├─stablelib x 27 ops/sec @ 36ms/op\n├─noble-webcrypto x 4,059 ops/sec @ 246μs/op\n└─noble x 74 ops/sec @ 13ms/op\n```\n\n## Upgrading\n\nUpgrade from `micro-aes-gcm` package is simple:\n\n```js\n// prepare\nconst key = Uint8Array.from([\n  64, 196, 127, 247, 172, 2, 34, 159, 6, 241, 30, 174, 183, 229, 41, 114, 253, 122, 119, 168, 177,\n  243, 155, 236, 164, 159, 98, 72, 162, 243, 224, 195,\n]);\nconst message = 'Hello world';\n\n// previous\nimport * as aes from 'micro-aes-gcm';\nconst ciphertext = await aes.encrypt(key, aes.utils.utf8ToBytes(message));\nconst plaintext = await aes.decrypt(key, ciphertext);\nconsole.log(aes.utils.bytesToUtf8(plaintext) === message);\n\n// became =>\n\nimport { gcm } from '@noble/ciphers/aes';\nimport { bytesToUtf8, utf8ToBytes } from '@noble/ciphers/utils';\nimport { managedNonce } from '@noble/ciphers/webcrypto';\nconst aes = managedNonce(gcm)(key);\nconst ciphertext = aes.encrypt(utf8ToBytes(message));\nconst plaintext = aes.decrypt(key, ciphertext);\nconsole.log(bytesToUtf8(plaintext) === message);\n```\n\n## Contributing & testing\n\n1. Clone the repository\n2. `npm install` to install build dependencies like TypeScript\n3. `npm run build` to compile TypeScript code\n4. `npm run test` will execute all main tests\n\n## Resources\n\nCheck out [paulmillr.com/noble](https://paulmillr.com/noble/)\nfor useful resources, articles, documentation and demos\nrelated to the library.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2023 Paul Miller [(https://paulmillr.com)](https://paulmillr.com)\nCopyright (c) 2016 Thomas Pornin <pornin@bolet.org>\n\nSee LICENSE file.\n","readmeFilename":"README.md"}